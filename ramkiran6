PAGE  REPLACEMENT ALGORITHMS



24. A program to FIFO page replacement algorithm..


#include<stdio.h>
main()
{
 int i,j,n,a[50],frame[10],no,k,avail,count=0;
 printf("\nenter the number of pages\n");
 scanf("%d",&n);
 printf("\nenter the page number:\n");
 for(i=1;i<=n;i++)
  scanf("%d",&a[i]);
 printf("\nenter the number of frames\n");
 scanf("%d",&no);
 for(i=0;i<no;i++)
  frame[i]=-1;
   j=0;
  printf("ref string \t page frames\n");
  for(i=1;i<=n;i++)
  {
    printf("%d\t\t",a[i]);
    avail=0;
    for(k=0;k<no;k++)
     if(frame[k]==a[i])
      avail=1;
     if(avail==0)
     {
      frame[j]=a[i];
      j=(j+1)%no;
      count++;
      for(k=0;k<no;k++)
       printf("%d\t",frame[k]);
     }
    printf("\n");
  }
  printf("\npage fault is %d",count);
}










~ "fifo.c" 34L, 689C written
[dmgv@LinuxServer ~]$ cc fifo.c
[dmgv@LinuxServer ~]$ ./a.out

enter the number of pages
10

enter the page number:
3 5 7 1 4 9 5 6 2 7

enter the number of frames
3
ref string       page frames
3               3       -1      -1
5               3       5       -1
7               3       5       7
1               1       5       7
4               1       4       7
9               1       4       9
5               5       4       9
6               5       6       9
2               5       6       2
7               7       6       2



















25. A program to Optimal page replacement algorithm..


#include<stdio.h>
main()
{
int k,f,c,flag,n,m,h,i,j,l,t,e=50;
int pf=1,p[20],d[20],q[20],r[20],temp[20];
printf("enter no.of frames:\n");
scanf("%d",&n);
printf("enter no.of pages in the control string:\n");
scanf("%d",&m);
printf("enter the control string\n");
for(i=0;i<m;i++)
scanf("%d",&p[i]);
q[0]=p[0];
c=1;i=1;
while(c<n)
{
f=0;
for(j=0;j<=c-1;j++)
if(p[i]==q[j])
{
f=1;j++;
break;
}
if(f!=1)
{
q[j]=p[i];
pf++; c++;
}
i++;
}
k=0;
for(i=1;i<m;i++)
{
flag=0;
for(j=0;j<n;j++)
if(p[i]==q[j])
{
flag=1;break;
}
if(flag!=1)
{
for(l=0;l<n;l++)
{
f=0;
for(h=i;h<m;h++)
if(q[l]==p[h])
{
d[l]=h; f=1;
break;
}
if(f!=1)
d[l]=e--;
}
for(l=0;l<n-1;l++)
temp[l]=q[l];
for(l=0;l<n-1;l++)
for(j=l+1;j<n;j++)
{
if(d[l]>d[j])
{
t=d[l];
d[l]=d[j];
d[j]=t;
t=q[l];
q[l]=q[j];
q[j]=t;
}
}
pf++;
r[k]=q[n-1];
temp[n-1]=q[n-1]=p[i];
printf("page %d is replaced wit page %d\n",r[k],p[i]);
k++;
if(k==n)
k=0;
for(l=0;i<n;i++)
q[l]=temp[l];
}
}









[dmgv@LinuxServer ~]$ cc optimal.c
[dmgv@LinuxServer ~]$ ./a.out
enter no.of frames:
3
enter no.of pages in the control string:
10
enter the control string
2 3 7 9 4 5 2 8 9 1
page 3 is replaced wit page 9
page 7 is replaced wit page 4
page 4 is replaced wit page 5
page 2 is replaced wit page 8
page 9 is replaced wit page 1
no.of page faults:8































26.A program to LRU page replacement algorithm.


#include<stdio.h>
main ()
{
int k,f,c,flag,n,m,i,j,pf=1,p[10],q[10],r[10],s,t,x[10],in[10],l;
printf("enter no of page frames :\n");
scanf("%d",&n);
printf("enter the no of pages in the control string :\n");
scanf("%d",&s);
printf("enter control string :\n");
for(i=0;i<s;i++)
scanf("%d",&p[i]);
q[0]=p[0];
c=1;
in[0]=0;
i=1;
while(c<n)
{
f=0;
for(j=0;j<=c-1;j++)
if(p[i]==q[j])
{
f=1;
in[j]=i;
j++;
break;
}
if(f|=1)
{
q[j]=p[i];
pf++;
c++;
in[j]=1;
}
i++;
}
k=0;
for(i=1;i<s;i++)
{
flag=0;
for(j=0;j<n;j++)
if(p[i]==q[j])
{
flag=1;
in[j]=1;
break;
}
for(l=0;l<n-1;l++)
x[l]=in[l];
for(m=l+1;m<n;m++)
{
if(x[l]>x[m])
{
t=x[1];
x[l]=x[m];
x[m]=t;
t=q[1];
q[l]=q[m];
q[m]=t;
}
}
if(flag!=1)
{
pf++;
r[k]=q[0];
q[0]=p[i];
in[0]=i;
printf("page %d is replaced with page %d\n",r[k],p[i]);
k++;
if(k==n)
k=0;
}
}
printf("no of page faults : %d\n",pf);
}

















[dmgv@LinuxServer ~]$ cc lru.c
[dmgv@LinuxServer ~]$ ./a.out
enter no of page frames :
3
enter the no of pages in the control string :
10
enter control string :
4 6 1 3 9 2 7 3 4 7
page 4 is replaced with page 3
page 3 is replaced with page 9
page 9 is replaced with page 2
page 2 is replaced with page 7
page 7 is replaced with page 3
page 3 is replaced with page 4
page 4 is replaced with page 7
no of page faults : 10



























